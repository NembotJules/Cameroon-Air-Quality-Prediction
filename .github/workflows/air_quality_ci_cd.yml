name: Cameroon Air Quality CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1  # Replace with your AWS region
  ECR_REPOSITORY: docker_api_model_service  # Replace with your ECR repository name
  ECS_SERVICE: aqi_model_api_service   # Replace with your ECS service name
  ECS_CLUSTER: Air-Quality-Cluster # Replace with your ECS cluster name

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10.12'  # Adjust to your project's Python version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  
        pip install pytest  
    
    - name: Run tests
      run: |
        pytest tests/  # run tests 
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Update ECS service
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update ECS service with the new image
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment \
          --task-definition $(aws ecs describe-task-definition \
            --task-definition $ECS_SERVICE \
            --query 'taskDefinition.family' \
            --output text):$(aws ecs describe-task-definition \
              --task-definition $ECS_SERVICE \
              --query 'taskDefinition.revision' \
              --output text)